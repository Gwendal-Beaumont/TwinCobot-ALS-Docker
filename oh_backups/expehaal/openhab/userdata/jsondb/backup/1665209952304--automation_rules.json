{
  "15caf39586": {
    "class": "org.openhab.core.automation.dto.RuleDTO",
    "value": {
      "triggers": [],
      "conditions": [],
      "actions": [
        {
          "inputs": {},
          "id": "script",
          "configuration": {
            "script": "var logger \u003d Java.type(\u0027org.slf4j.LoggerFactory\u0027).getLogger(\u0027org.openhab.rule.\u0027 + ctx.ruleUID);\nvar ScriptExecution \u003d Java.type(\"org.openhab.core.model.script.actions.ScriptExecution\");\nvar ZonedDateTime \u003d Java.type(\"java.time.ZonedDateTime\");\n\n\nvar dimmer_step \u003d 10;\nvar dimmer \u003d 0;\nvar predicted_pressure_value \u003d 0;\n\nthis.timer \u003d (this.timer \u003d\u003d\u003d undefined) ? null : this.timer;\npredicted_pressure_value \u003d itemRegistry.getItem(\u0027HTTPBedPressurePredictor_bed_press_predictor_channel\u0027).getState();\n\nlogger.info(\"predicted_pressure_value : \" + predicted_pressure_value);\n\nif(predicted_pressure_value \u003e 630){\n    this.timer \u003d ScriptExecution.createTimer(ZonedDateTime.now().plusSeconds(1), function () {\n    logger.info(\"Launche script dimmer\");\n    dimmer +\u003d dimmer_step;\n    logger.info(dimmer);\n    if(dimmer \u003e 100 \u0026\u0026 timer!\u003dnull){ \n      dimmer \u003d 100;\n      logger.info(\"LAMPE ALLUMEE !!!\");\n      logger.info(\"cancel timer\");\n      this.timer.cancel();\n      this.timer \u003d null;\n    }else{\n      logger.info(\"Send command and rescheduling\");\n      events.sendCommand(\u0027ZWaveNode003RGBWE2RGBWBulbV2_Dimmer\u0027, dimmer);\n      this.timer.reschedule(ZonedDateTime.now().plusSeconds(5));\n    }\n  })\n}\n\n\n\n",
            "type": "application/javascript"
          },
          "type": "script.ScriptAction"
        }
      ],
      "configuration": {},
      "configDescriptions": [],
      "uid": "15caf39586",
      "name": "ecma",
      "tags": [
        "Script"
      ],
      "visibility": "VISIBLE",
      "description": ""
    }
  },
  "4a0026c0fb": {
    "class": "org.openhab.core.automation.dto.RuleDTO",
    "value": {
      "triggers": [],
      "conditions": [],
      "actions": [
        {
          "inputs": {},
          "id": "script",
          "configuration": {
            "script": "rule \"Wake-Up Light Bed Pressure\"\nwhen \n  Item HTTPBedPressurePredictor changed\nthen\n  logInfo(\"Bed Pressure\", \"Bed pressure changed\")\nend",
            "type": "application/vnd.openhab.dsl.rule"
          },
          "type": "script.ScriptAction"
        }
      ],
      "configuration": {},
      "configDescriptions": [],
      "uid": "4a0026c0fb",
      "name": "my test script",
      "tags": [
        "Script"
      ],
      "visibility": "VISIBLE",
      "description": ""
    }
  },
  "5734170e9d": {
    "class": "org.openhab.core.automation.dto.RuleDTO",
    "value": {
      "triggers": [],
      "conditions": [],
      "actions": [
        {
          "inputs": {},
          "id": "script",
          "configuration": {
            "blockSource": "\u003cxml xmlns\u003d\"https://developers.google.com/blockly/xml\"\u003e\u003cvariables\u003e\u003cvariable id\u003d\"*R-n)do#JIZ}sT[ObGTS\"\u003emyval\u003c/variable\u003e\u003c/variables\u003e\u003cblock type\u003d\"oh_store_value\" id\u003d\"N^g+_{gD9rX7Xur)`\u003d^F\" x\u003d\"206\" y\u003d\"141\"\u003e\u003cvalue name\u003d\"value\"\u003e\u003cshadow type\u003d\"text\" id\u003d\"mK0OK{,($/0KJp?B-VZ_\"\u003e\u003cfield name\u003d\"TEXT\"\u003evalue\u003c/field\u003e\u003c/shadow\u003e\u003cblock type\u003d\"oh_getitem_state\" id\u003d\"nzGKR[ZX45o39kX|A0~x\"\u003e\u003cvalue name\u003d\"itemName\"\u003e\u003cshadow type\u003d\"oh_item\" id\u003d\"X^9+khc2_a+:cHPy,r)/\"\u003e\u003cfield name\u003d\"itemName\"\u003eHTTPBedPressurePredictor_bed_press_predictor_channel\u003c/field\u003e\u003c/shadow\u003e\u003c/value\u003e\u003c/block\u003e\u003c/value\u003e\u003cvalue name\u003d\"key\"\u003e\u003cshadow type\u003d\"text\" id\u003d\"PiuZ94lcJ91T{}bNcQ~j\"\u003e\u003cfield name\u003d\"TEXT\"\u003emyval\u003c/field\u003e\u003c/shadow\u003e\u003cblock type\u003d\"variables_get\" id\u003d\"M+Af:x42D.**j8.6IR/1\"\u003e\u003cfield name\u003d\"VAR\" id\u003d\"*R-n)do#JIZ}sT[ObGTS\"\u003emyval\u003c/field\u003e\u003c/block\u003e\u003c/value\u003e\u003c/block\u003e\u003cblock type\u003d\"oh_timer\" id\u003d\"d@9CY,!!m`c_yw47(`EU\" x\u003d\"217\" y\u003d\"376\"\u003e\u003cfield name\u003d\"delayUnits\"\u003eplusSeconds\u003c/field\u003e\u003cvalue name\u003d\"delay\"\u003e\u003cshadow type\u003d\"math_number\" id\u003d\"C]+sLFY@#tsqihl/yV7d\"\u003e\u003cfield name\u003d\"NUM\"\u003e10\u003c/field\u003e\u003c/shadow\u003e\u003c/value\u003e\u003cvalue name\u003d\"timerName\"\u003e\u003cshadow type\u003d\"text\" id\u003d\"OfReRx/dgUJFL`Vq[5x}\"\u003e\u003cfield name\u003d\"TEXT\"\u003eMyTimer\u003c/field\u003e\u003c/shadow\u003e\u003c/value\u003e\u003cstatement name\u003d\"timerCode\"\u003e\u003cblock type\u003d\"controls_if\" id\u003d\"[D-T33.ktNk^53nno/Wi\"\u003e\u003cvalue name\u003d\"IF0\"\u003e\u003cblock type\u003d\"logic_compare\" id\u003d\"KE/8v.TY1Q-xlHcLmHjd\"\u003e\u003cfield name\u003d\"OP\"\u003eGT\u003c/field\u003e\u003cvalue name\u003d\"A\"\u003e\u003cblock type\u003d\"variables_get\" id\u003d\"*p.((sA$MU9619T}*A/m\"\u003e\u003cfield name\u003d\"VAR\" id\u003d\"*R-n)do#JIZ}sT[ObGTS\"\u003emyval\u003c/field\u003e\u003c/block\u003e\u003c/value\u003e\u003cvalue name\u003d\"B\"\u003e\u003cblock type\u003d\"math_number\" id\u003d\"M5Ao9M{Vu2r$E}Tb3PID\"\u003e\u003cfield name\u003d\"NUM\"\u003e650\u003c/field\u003e\u003c/block\u003e\u003c/value\u003e\u003c/block\u003e\u003c/value\u003e\u003cstatement name\u003d\"DO0\"\u003e\u003cblock type\u003d\"oh_print\" id\u003d\"vR3F)%JVO6w)q^ez:wKk\"\u003e\u003cvalue name\u003d\"message\"\u003e\u003cshadow type\u003d\"text\" id\u003d\"w@|00(R1-JSo2@oqb/{0\"\u003e\u003cfield name\u003d\"TEXT\"\u003eCoucou c\u0027est un test\u003c/field\u003e\u003c/shadow\u003e\u003c/value\u003e\u003c/block\u003e\u003c/statement\u003e\u003c/block\u003e\u003c/statement\u003e\u003c/block\u003e\u003c/xml\u003e",
            "script": "var myval;\n\nif (typeof this.storedValues \u003d\u003d\u003d \u0027undefined\u0027) {\n  this.storedValues \u003d [];\n}\n\nvar scriptExecution \u003d Java.type(\u0027org.openhab.core.model.script.actions.ScriptExecution\u0027);\n\nvar zdt \u003d Java.type(\u0027java.time.ZonedDateTime\u0027);\n\nif (typeof this.timers \u003d\u003d\u003d \u0027undefined\u0027) {\n  this.timers \u003d [];\n}\n\n\nthis.storedValues[myval] \u003d itemRegistry.getItem(\u0027HTTPBedPressurePredictor_bed_press_predictor_channel\u0027).getState();\n\nif (typeof this.timers[\u0027MyTimer\u0027] \u003d\u003d\u003d \u0027undefined\u0027 || this.timers[\u0027MyTimer\u0027].hasTerminated()) {\n  this.timers[\u0027MyTimer\u0027] \u003d scriptExecution.createTimer(zdt.now().plusSeconds(10), function () {\n    if (myval \u003e 650) {\n      print(\u0027Coucou c\\\u0027est un test\u0027);\n    }\n    })\n}\n",
            "type": "application/javascript"
          },
          "type": "script.ScriptAction"
        }
      ],
      "configuration": {},
      "configDescriptions": [],
      "uid": "5734170e9d",
      "name": "zdzd",
      "tags": [
        "Script"
      ],
      "visibility": "VISIBLE",
      "description": ""
    }
  },
  "c3272534d2": {
    "class": "org.openhab.core.automation.dto.RuleDTO",
    "value": {
      "triggers": [
        {
          "id": "1",
          "configuration": {
            "itemName": "ZWaveNode005PST02ASlimMultiSensorPIRDoorTemperatureIllumination_DoorWindowSensor",
            "previousState": "CLOSED",
            "state": "OPEN"
          },
          "type": "core.ItemStateChangeTrigger"
        }
      ],
      "conditions": [],
      "actions": [
        {
          "inputs": {},
          "id": "2",
          "configuration": {
            "command": "100,255,100",
            "itemName": "ZWaveNode003RGBWE2RGBWBulbV2_ColorControl"
          },
          "type": "core.ItemCommandAction"
        }
      ],
      "configuration": {},
      "configDescriptions": [],
      "uid": "c3272534d2",
      "name": "Alam Entrance Hall",
      "tags": [],
      "visibility": "VISIBLE"
    }
  },
  "e0551b5a72": {
    "class": "org.openhab.core.automation.dto.RuleDTO",
    "value": {
      "triggers": [
        {
          "id": "1",
          "configuration": {
            "cronExpression": "0/60 * * * * ? *"
          },
          "type": "timer.GenericCronTrigger"
        }
      ],
      "conditions": [
        {
          "inputs": {},
          "id": "3",
          "configuration": {
            "itemName": "ZWaveNode003RGBWE2RGBWBulbV2_Dimmer",
            "operator": "\u003d",
            "state": 0.0
          },
          "type": "core.ItemStateCondition"
        }
      ],
      "actions": [
        {
          "inputs": {},
          "id": "2",
          "configuration": {
            "script": "var logger \u003d Java.type(\u0027org.slf4j.LoggerFactory\u0027).getLogger(\u0027org.openhab.rule.\u0027 + ctx.ruleUID);\nvar ScriptExecution \u003d Java.type(\"org.openhab.core.model.script.actions.ScriptExecution\");\nvar ZonedDateTime \u003d Java.type(\"java.time.ZonedDateTime\");\n\nvar dimmer_step \u003d 10;\nvar dimmer \u003d 0;\nvar predicted_pressure_value \u003d 0;\n\nthis.timer \u003d (this.timer \u003d\u003d\u003d undefined) ? null : this.timer;\npredicted_pressure_value \u003d itemRegistry.getItem(\u0027HTTPBedPressurePredictor_bed_press_predictor_channel\u0027).getState();\n\nlogger.info(\"predicted_pressure_value : \" + predicted_pressure_value);\n\nif(predicted_pressure_value \u003e 630){\n    this.timer \u003d ScriptExecution.createTimer(ZonedDateTime.now().plusSeconds(1), function () {\n    logger.info(\"Launche script dimmer\");\n    dimmer +\u003d dimmer_step;\n    logger.info(dimmer);\n    if(dimmer \u003e 100 \u0026\u0026 timer!\u003dnull){ \n      dimmer \u003d 100;\n      logger.info(\"LAMPE ALLUMEE !!!\");\n      logger.info(\"cancel timer\");\n      this.timer.cancel();\n      this.timer \u003d null;\n    }else{\n      logger.info(\"Send command and rescheduling\");\n      events.sendCommand(\u0027ZWaveNode003RGBWE2RGBWBulbV2_Dimmer\u0027, dimmer);\n      this.timer.reschedule(ZonedDateTime.now().plusSeconds(5));\n    }\n  })\n}\n",
            "type": "application/javascript"
          },
          "type": "script.ScriptAction"
        }
      ],
      "configuration": {},
      "configDescriptions": [],
      "uid": "e0551b5a72",
      "name": "Trigger for Wake Up ",
      "tags": [
        "Schedule"
      ],
      "visibility": "VISIBLE",
      "description": "Trigger for Wake Up "
    }
  }
}